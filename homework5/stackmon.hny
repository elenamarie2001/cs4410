from synch import *
from alloc import malloc, free

def Stack():
    result = { .head: None, .mutex: Lock(), .c_pop: Condition(), .c_post: Condition() }

def push(s, v):    
    acquire(?s->mutex)
    s->head = malloc({ .value: v, .next: s->head })
    notify(?s->c_pop)
    release(?s->mutex)

def pop(s):
    acquire(?s->mutex)
    while (s->head == None):
        wait(?s->c_pop, ?s->mutex)
    let node = s->head:
        assert node != None
        result = node->value
        s->head = node->next
        free(node)
    if s->head == None:
        notifyAll(?s->c_post)
    release(?s->mutex)

def post(s):
    acquire(?s->mutex)
    while (s->head != None):
        wait(?s->c_post, ?s->mutex)
    release(?s->mutex)